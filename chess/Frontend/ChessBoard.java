/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import ChessCore.BoardFile;
import ChessCore.BoardRank;
import ChessCore.ClassicChessGame;
import ChessCore.GameStatus;
import ChessCore.Square;
import ChessCore.Move;
import ChessCore.PawnPromotion;
import ChessCore.Pieces.Bishop;
import ChessCore.Pieces.King;
import ChessCore.Pieces.Knight;
import ChessCore.Pieces.Pawn;
import ChessCore.Pieces.Piece;
import ChessCore.Pieces.Queen;
import ChessCore.Pieces.Rook;
import ChessCore.Player;
import ChessCore.Utilities;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Malak
 */
public class ChessBoard extends javax.swing.JFrame {

    private static JButton[][] chessPieceButtons = new JButton[8][8];
    private static Square[][] squares = new Square[8][8];
    private static ClassicChessGame classicChessGame;
    private static boolean isRed = true;
    private static Color[][] originalColors = new Color[8][8];
    private static Color customColor1 = new Color(220, 190, 150); //beige
    private static Color customColor2 = new Color(129, 0, 0); //red
    public static Square prevSquare = null;
    public static Square nextSquare = null;
    public static Piece pieceAtSquare = null;

    private static boolean isBoardFlipped = true;

    //private List<Square> validMoves = new ArrayList<>();
    /**
     * Creates new form ChessBoard
     */
    public ChessBoard(ClassicChessGame classicChessGame) {
        setTitle("Chess Game");
        this.classicChessGame = classicChessGame;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chessBoardPanel = new javax.swing.JPanel();
        undoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chessBoardPanel.setLayout(new java.awt.GridLayout(8, 8));
        BoardRank boardRank = null ;
        BoardFile boardFile = null;
        //Color customColor1 = new Color(220, 190, 150); //beige
        //Color customColor2 = new Color(129, 0, 0); //red
        //boolean  isRed = true;
        for (int row = 0; row < 8; row++) {
            isRed=!isRed;
            int col;
            for ( col = 0; col < 8; col++) {

                JButton chessPieceButton = new JButton();
                Color buttonColor;
                if(isRed){
                    buttonColor = customColor2;
                    isRed=false;
                }
                else{
                    buttonColor = customColor1;
                    isRed=true;
                }
                originalColors[row][col] = buttonColor;
                chessPieceButton.setBackground(buttonColor);

                chessPieceButton.setBorderPainted(false);
                chessPieceButton.setOpaque(true);
                chessPieceButton.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        // System.out.println("Button clicked");
                        JButton pieceClicked = (JButton)e.getSource();
                        buttonAction(pieceClicked);

                    }

                });

                chessBoardPanel.add(chessPieceButton);
                switch(row){
                    case 0:
                    boardRank = BoardRank.FIRST;
                    break;
                    case 1:
                    boardRank = BoardRank.SECOND;
                    break;
                    case 2:
                    boardRank = BoardRank.THIRD;
                    break;
                    case 3:
                    boardRank = BoardRank.FORTH;
                    break;
                    case 4:
                    boardRank = BoardRank.FIFTH;
                    break;
                    case 5:
                    boardRank = BoardRank.SIXTH;
                    break;
                    case 6:
                    boardRank = BoardRank.SEVENTH;
                    break;
                    case 7:
                    boardRank = BoardRank.EIGHTH;
                    break;
                    default:
                    break;
                }
                switch(col){
                    case 0:
                    boardFile = BoardFile.A;
                    break;
                    case 1:
                    boardFile = BoardFile.B;
                    break;
                    case 2:
                    boardFile = BoardFile.C;
                    break;
                    case 3:
                    boardFile = BoardFile.D;
                    break;
                    case 4:
                    boardFile = BoardFile.E;
                    break;
                    case 5:
                    boardFile = BoardFile.F;
                    break;
                    case 6:
                    boardFile = BoardFile.G;
                    break;
                    case 7:
                    boardFile = BoardFile.H;
                    break;
                    default:
                    break;
                }
                squares[row][col]=new Square(boardFile,boardRank);

                chessPieceButtons[row][col] = chessPieceButton;
            }
        }

        ImageIcon blackPawnIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackPawn.png");
        ImageIcon whitePawnIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhitePawn.png");
        ImageIcon blackBishopIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackBishop.png");
        ImageIcon whiteBishopIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhiteBishop.png");
        ImageIcon blackKnightIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackKnight.png");
        ImageIcon whiteKnightIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhiteKnight.png");
        ImageIcon blackRookIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackRook.png");
        ImageIcon whiteRookIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhiteRook.png");
        ImageIcon blackKingIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackKing.png");
        ImageIcon whiteKingIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhiteKing.png");
        ImageIcon blackQueenIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\BlackQueen.png");
        ImageIcon whiteQueenIcon = new ImageIcon("C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\WhiteQueen.png");

        for(int i=0;i<8;i++){
            chessPieceButtons[1][i].setIcon(whitePawnIcon);
            chessPieceButtons[6][i].setIcon(blackPawnIcon);
        }
        chessPieceButtons[0][2].setIcon(whiteBishopIcon);
        chessPieceButtons[0][5].setIcon(whiteBishopIcon);
        chessPieceButtons[7][2].setIcon(blackBishopIcon);
        chessPieceButtons[7][5].setIcon(blackBishopIcon);

        chessPieceButtons[0][1].setIcon(whiteKnightIcon);
        chessPieceButtons[0][6].setIcon(whiteKnightIcon);
        chessPieceButtons[7][1].setIcon(blackKnightIcon);
        chessPieceButtons[7][6].setIcon(blackKnightIcon);

        chessPieceButtons[0][0].setIcon(whiteRookIcon);
        chessPieceButtons[0][7].setIcon(whiteRookIcon);
        chessPieceButtons[7][0].setIcon(blackRookIcon);
        chessPieceButtons[7][7].setIcon(blackRookIcon);

        chessPieceButtons[0][4].setIcon(whiteKingIcon);
        chessPieceButtons[7][4].setIcon(blackKingIcon);

        chessPieceButtons[0][3].setIcon(whiteQueenIcon);
        chessPieceButtons[7][3].setIcon(blackQueenIcon);

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chessBoardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(undoButton)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(undoButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chessBoardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        // TODO add your handling code here:
        classicChessGame.undoMove();
        for (int row = 0; row < 8; row++) {
            isRed = !isRed;
            int col;
            for (col = 0; col < 8; col++) {

                Color buttonColor;
                if (isRed) {
                    buttonColor = customColor2;
                    isRed = false;
                } else {
                    buttonColor = customColor1;
                    isRed = true;
                }
                originalColors[row][col] = buttonColor;
                chessPieceButtons[row][col].setBackground(buttonColor);

            }
        }
        updateBoard();

    }//GEN-LAST:event_undoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void buttonAction(JButton pieceClicked) {
        int i;
        int j;
        Square whiteKing = findKing(Player.WHITE);
        Square blackKing = findKing(Player.BLACK);
        for (i = 0; i < 8; i++) {
            for (j = 0; j < 8; j++) {
                //System.out.println("inside0");
                if (pieceClicked == chessPieceButtons[i][j]) {
                    //System.out.println("inside99");
                    List<Square> validMoves = classicChessGame.getAllValidMovesFromSquare(squares[i][j]);
                    highlightValidMoves(validMoves);
                    if (prevSquare == null) {
                        //ya3my di awel square yetdass 3aleh
                        prevSquare = squares[i][j];
                        pieceAtSquare = classicChessGame.getPieceAtSquare(prevSquare);
                        if (pieceAtSquare == null || !pieceAtSquare.getOwner().equals(classicChessGame.getWhoseTurn())) {
                            prevSquare = null;
                        }
                        //nextSquare = null;
                    } else {     //ya3ny di tany dossa el square el 3ayzin nero7lo
                        nextSquare = squares[i][j];

                        Move move = new Move(prevSquare, nextSquare);
                        if (pieceAtSquare instanceof Pawn && nextSquare.getRank() == BoardRank.FIRST || nextSquare.getRank() == BoardRank.EIGHTH) {
                            pawnPromotion();
                            prevSquare = null;
                            nextSquare = null;
                            break;
                        }
                        if (classicChessGame.makeMove(move)) {
                            updateBoard();
                            //flipBoard();
                            //System.out.println("move made");
                            prevSquare = null;
                            nextSquare = null;

                            //isBoardFlipped = !isBoardFlipped;
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Move!", "Error", JOptionPane.ERROR_MESSAGE);
                            prevSquare = null;
                            nextSquare = null;
                        }

                    }

                }
                if (squares[i][j].equals(whiteKing) && classicChessGame.getGameStatus() == GameStatus.WHITE_UNDER_CHECK) {
                    chessPieceButtons[i][j].setBackground(new Color(255, 165, 0));
                } else if (squares[i][j].equals(blackKing) && classicChessGame.getGameStatus() == GameStatus.BLACK_UNDER_CHECK) {
                    chessPieceButtons[i][j].setBackground(new Color(255, 165, 0));
                }
            }
        }

    }

    private static void highlightValidMoves(List<Square> validMoves) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                chessPieceButtons[i][j].setBackground(originalColors[i][j]);
            }
        }
        Square whiteKing = findKing(Player.WHITE);
        Square blackKing = findKing(Player.BLACK);
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                for (Square s : validMoves) {
                    if (s.getFile() == squares[row][col].getFile() && s.getRank() == squares[row][col].getRank()) {
                        chessPieceButtons[row][col].setBackground(Color.BLUE);
                    }
                }

            }
        }
    }

    private static Square findKing(Player player) {
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                Piece piece = classicChessGame.getPieceAtSquare(squares[row][col]);
                if (piece instanceof King && piece.getOwner() == player) {
                    return squares[row][col];
                }
            }
        }
        return null;
    }

    private static void updateBoard() {
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                //int displayRow = isBoardFlipped ? 7 - row : row;
                //int displayCol = isBoardFlipped ? 7 - col : col;

                Square square = squares[row][col];
                JButton button = chessPieceButtons[row][col];

                button.setIcon(null);

                Piece piece = classicChessGame.getPieceAtSquare(square);

                if (piece != null) {
                    ImageIcon pieceIcon = getPieceIcon(piece);
                    button.setIcon(pieceIcon);

                    if (piece instanceof King && Utilities.isInCheck(piece.getOwner(), classicChessGame.getBoard())) {
                        button.setBackground(new Color(255, 165, 0));
                    }
                }

            }
        }
        if (classicChessGame.isGameEnded()) {
            switch (classicChessGame.getGameStatus()) {
                case BLACK_WON:
                    gameEndedMessage("Black player wins!");
                    break;
                case WHITE_WON:
                    gameEndedMessage("White player wins!");
                    break;
                case STALEMATE:
                    gameEndedMessage("The game is a draw!");
                    break;
                case INSUFFICIENT_MATERIAL:
                    gameEndedMessage("The game is a draw due to insufficient material!");
                    break;
            }
        }
    }

    private static ImageIcon getPieceIcon(Piece piece) {
        String path = "C:\\Users\\Malak\\Desktop\\Studies\\Term 5\\Programming 2\\New folder\\";
        String color = (piece.getOwner() == Player.WHITE) ? "White" : "Black";
        String pieceName = piece.getClass().getSimpleName();
        String imagePath = path + color + pieceName + ".png";
        return new ImageIcon(imagePath);
    }

    public static void gameEndedMessage(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Game Over", JOptionPane.ERROR_MESSAGE);
    }

    public static void flipBoard() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 8; j++) {
                Icon tempIcon = chessPieceButtons[i][j].getIcon();
                Square tempSquare = (Square) chessPieceButtons[i][j].getClientProperty("square");
                chessPieceButtons[i][j].setIcon(chessPieceButtons[8 - i - 1][j].getIcon());
                chessPieceButtons[i][j].putClientProperty("square", (Square) chessPieceButtons[8 - i - 1][j].getClientProperty("square"));
                chessPieceButtons[8 - i - 1][j].setIcon(tempIcon);
                chessPieceButtons[8 - i - 1][j].putClientProperty("square", tempSquare);
            }
        }
    }

    public static void pawnPromotion() {
        Piece promotedPiece = pawnPromotionChoices(classicChessGame.getWhoseTurn(), prevSquare, nextSquare);
        if (promotedPiece != null) {
            classicChessGame.pawnPromotion(prevSquare, nextSquare, promotedPiece);
            updateBoard();
        }

    }

    public static Piece pawnPromotionChoices(Player player, Square prevsquare, Square nextSquare) {
        Object[] options = {"Queen", "Rook", "Knight", "Bishop"};
        int selection = JOptionPane.showOptionDialog(null, "Choose a piece for pawn promotion:", "Pawn Promotion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        switch (selection) {
            case 0:
                classicChessGame.makeMove(new Move(prevSquare, nextSquare, PawnPromotion.Queen));
                return new Queen(player);
            case 1:
                classicChessGame.makeMove(new Move(prevSquare, nextSquare, PawnPromotion.Rook));
                return new Rook(player);
            case 2:
                classicChessGame.makeMove(new Move(prevSquare, nextSquare, PawnPromotion.Knight));
                return new Knight(player);
            case 3:
                classicChessGame.makeMove(new Move(prevSquare, nextSquare, PawnPromotion.Bishop));
                return new Bishop(player);
            default:
                return null;
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ClassicChessGame classicChessGame = new ClassicChessGame();
                ChessBoard chessBoard = new ChessBoard(classicChessGame);
                chessBoard.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chessBoardPanel;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables
}
